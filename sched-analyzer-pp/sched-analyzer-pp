#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
#
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2024 Qais Yousef

import argparse
import freq
import idle
import matplotlib
import matplotlib.pyplot as pltlib
import os
import plotext as pltext
import sa_track
import sched
import settings
import trace_processor as tp
import utils

try:
    import argcomplete
except:
    pass

args = None

def add_sa_track_option(parser, name, help, running_options=False):
    parser.add_argument('--' + name, action='append', metavar='PATTERN',
                    help=help)
    parser.add_argument('--' + name + '-hist', action='append', metavar='PATTERN')
    parser.add_argument('--' + name + '-residency', action='append', metavar='PATTERN')
    parser.add_argument('--' + name + '-residency-abs', action='append', metavar='PATTERN')

    if running_options:
        add_sa_track_option(parser, name + '-running', 'Same as ' + name + ' but filtered for when task is RUNNING, if the track is for a task.')

def process_sa_track_option(args, name, running_options=False):
    vargs = vars(args)

    name_hist = name + '_hist'
    name_residency = name + '_residency'
    name_residency_abs = name + '_residency_abs'

    if vargs[name] or vargs[name_hist] or vargs[name_residency]:
        sa_track.init(trace, name.replace('_running', ''))
        show_tui = True

        if args.save_csv:
            sa_track.sa_track_save_csv(prefix)
            show_tui = False

        if vargs[name]:
            if args.save_png:
                sa_track.plot_sa_track_matplotlib(pltlib, prefix, vargs[name], 'running' in name)
                show_tui = False

            if show_tui:
                sa_track.plot_sa_track_tui(pltext, vargs[name], 'running' in name)

        if vargs[name_hist]:
            if args.save_png:
                sa_track.plot_sa_track_hist_matplotlib(pltlib, prefix, vargs[name_hist], 'running' in name)
                show_tui = False

            if show_tui:
                sa_track.plot_sa_track_hist_tui(pltext, vargs[name_hist], 'running' in name)

        if vargs[name_residency]:
            if args.save_png:
                print(name_residency + " --save-png: Not implemented yet.")
                show_tui = False

            if show_tui:
                sa_track.plot_sa_track_residency_tui(pltext, vargs[name_residency], 'running' in name)

        if vargs[name_residency_abs]:
            if args.save_png:
                print(name_residency_abs + " --save-png: Not implemented yet.")
                show_tui = False

            if show_tui:
                sa_track.plot_sa_track_residency_abs_tui(pltext, vargs[name_residency_abs], 'running' in name)

    if running_options:
        process_sa_track_option(args, name + '_running')

def parse_cmdline():
    parser = argparse.ArgumentParser(description='''
    Post Process sched-analyzer.perfetto-trace captured with sched-analyzer tool
    ''', formatter_class=argparse.RawTextHelpFormatter)

    # Global options
    parser.add_argument('filename',
                    help='perfetto-trace file to post process.')

    parser.add_argument('--save-png', action='store_true',
                    help='Save graphs as png images.')
    parser.add_argument('--save-csv', action='store_true',
                    help='Save raw data as csv file.')

    # freq/idle modules options
    parser.add_argument('--freq', action='store_true',
                    help='Show frequency for all cpus.')
    parser.add_argument('--freq-residency', action='store_true',
                    help='Show percentage of time spent in each frequency for all cpus.')
    parser.add_argument('--freq-residency-abs', action='store_true',
                    help='Show time in ms spent in each frequency for all cpus.')
    parser.add_argument('--freq-task', action='append', metavar='PATTERN',
                    help='Show frequency for a given task')
    parser.add_argument('--freq-residency-task', action='append', metavar='PATTERN',
                    help='Show frequency residency % for a given task')
    parser.add_argument('--freq-residency-abs-task', action='append', metavar='PATTERN',
                    help='Show frequency residency in ms for a given task')
    parser.add_argument('--idle-residency', action='store_true',
                    help='Show percentage of time spent in each idle state for all cpus.')
    parser.add_argument('--idle-residency-abs', action='store_true',
                    help='Show time in ms spent in each idle state for all cpus.')

    # sa_track module options
    add_sa_track_option(parser, 'util-avg',
            'Show util_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str',
            True)
    add_sa_track_option(parser, 'util-avg-rt',
            'Show util_avg_rt for CPUs. Can be provided multiple times. \'CPU\' to show all cpus',
            False)
    add_sa_track_option(parser, 'util-avg-dl',
            'Show util_avg_dl for CPUs. Can be provided multiple times. \'CPU\' to show all cpus',
            False)
    add_sa_track_option(parser, 'util-avg-irq',
            'Show util_avg_irq for CPUs. Can be provided multiple times. \'CPU\' to show all cpus',
            False)
    add_sa_track_option(parser, 'load-avg-thermal',
            'Show load_avg_thermal for CPUs. Can be provided multiple times. \'CPU\' to show all cpus',
            False)
    add_sa_track_option(parser, 'load-avg',
            'Show load_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str',
            True)
    add_sa_track_option(parser, 'runnable-avg',
            'Show runnable_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str',
            True)
    add_sa_track_option(parser, 'uclamped-avg',
            'Show uclamped_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str',
            True)
    add_sa_track_option(parser, 'cpu-nr-running',
            'Show nr of tasks running for CPUs. Can be provided multiple times. \'CPU\' to show all cpus.',
            False)

    # sched module options
    parser.add_argument('--sched-report', action='store_true',
                    help='Print a general summary of sched info for all tasks in the trace.')
    parser.add_argument('--sched-states', action='append', metavar='PATTERN',
                    help='Print a summary of sched-states for a task in the trace. Can be provided multiple times.')
    parser.add_argument('--sched-states-parent', action='append', metavar='PATTERN',
                    help='Print a summary of sched-states for a all tasks belonging to parent in the trace. Can be provided multiple times.')


    # settings module options
    parser.add_argument('--ts-start', type=float,
                    help='Plot starting from this timestamp')
    parser.add_argument('--ts-end', type=float,
                    help='Plot end with this timestamp')
    parser.add_argument('--fig-width-tui', type=int,
                    help='Width of TUI text and figures')
    parser.add_argument('--fig-height-tui', type=int,
                    help='Height of TUI figures')
    parser.add_argument('--xfrequency-tui', type=int,
                    help='Frequency of x-axis of time based TUI figures')
    parser.add_argument('--yfrequency-tui', type=int,
                    help='Frequency of y-axis of time based TUI figures')
    parser.add_argument('--grid-tui', action='store_true',
                    help='Show grid on both axis in TUI figures')
    parser.add_argument('--grid-x-tui', action='store_true',
                    help='Show grid on x-axis in TUI figures')
    parser.add_argument('--grid-y-tui', action='store_true',
                    help='Show grid on y-axis in TUI figures')

    parser.add_argument('--theme', type=str, default='clear',
                    choices=['default', 'clear', 'pro', 'matrix',
                             'windows', 'girly', 'dark', 'metro',
                             'elegant', 'grandpa', 'salad', 'serious',
                             'scream', 'dreamland', 'sand', 'mature'],
                    help='TUI Color theme.')

    try:
        argcomplete.autocomplete(parser)
    except:
        pass

    return parser.parse_args()

if __name__ == '__main__':
    args = parse_cmdline()

    pltext.clf()
    pltext.cld()
    pltext.theme(args.theme)
    matplotlib.use('Agg')

    prefix = args.filename.replace('.perfetto-trace', '')

    trace = tp.get_trace(args.filename)

    utils.init(trace)

    # Handle settings
    settings.init()
    if args.ts_start:
        settings.set_ts_start(args.ts_start)
    if args.ts_end:
        settings.set_ts_end(args.ts_end)
    if args.fig_width_tui:
        settings.set_fig_width_tui(args.fig_width_tui)
    if args.fig_height_tui:
        settings.set_fig_height_tui(args.fig_height_tui)
    if args.xfrequency_tui:
        settings.set_xfrequncy_tui(args.xfrequency_tui)
    if args.yfrequency_tui:
        settings.set_yfrequncy_tui(args.yfrequency_tui)

    pltext.xfrequency(settings.xfrequency_tui)
    pltext.yfrequency(settings.yfrequency_tui)

    if (args.grid_tui):
        pltext.grid(True, True)
    if (args.grid_x_tui):
        pltext.grid(True, False)
    if (args.grid_y_tui):
        pltext.grid(False, True)

    if args.freq or args.freq_residency or args.freq_residency_abs or args.freq_task or args.freq_residency_task or args.freq_residency_abs_task:
        freq.init(trace)
        show_tui = True

        if args.save_csv:
            freq.save_csv(prefix)
            show_tui = False

        if args.freq:
            if (args.save_png):
                freq.plot_matplotlib(pltlib, prefix)
                show_tui = False

            if show_tui:
                freq.plot_tui(pltext)

        if args.freq_residency:
            if (args.save_png):
                freq.plot_residency_matplotlib(pltlib, prefix)
                show_tui = False

            if show_tui:
                freq.plot_residency_tui(pltext)

        if args.freq_residency_abs:
            if (args.save_png):
                freq.plot_residency_abs_matplotlib(pltlib, prefix)
                show_tui = False

            if show_tui:
                freq.plot_residency_abs_tui(pltext)

        if args.freq_task:
            if (args.save_png):
                print("freq-task --save-png: Not implemented yet.")
                show_tui = False

            if show_tui:
                freq.plot_task_tui(pltext, args.freq_task)

        if args.freq_residency_task:
            if (args.save_png):
                print("freq-residency-task --save-png: Not implemented yet.")
                show_tui = False

            if show_tui:
                freq.plot_task_residency_tui(pltext, args.freq_residency_task)

        if args.freq_residency_abs_task:
            if (args.save_png):
                print("freq-residency-abs-task --save-png: Not implemented yet.")
                show_tui = False

            if show_tui:
                freq.plot_task_residency_abs_tui(pltext, args.freq_residency_task)

    if args.idle_residency or args.idle_residency_abs:
        idle.init(trace)
        show_tui = True

        if args.save_csv:
            idle.save_csv(prefix)
            show_tui = False

        if args.idle_residency:
            if (args.save_png):
                idle.plot_residency_matplotlib(pltlib, prefix)
                show_tui = False

            if show_tui:
                idle.plot_residency_tui(pltext)

        if args.idle_residency_abs:
            if (args.save_png):
                idle.plot_residency_abs_matplotlib(pltlib, prefix)
                show_tui = False

            if show_tui:
                idle.plot_residency_abs_tui(pltext)

    process_sa_track_option(args, 'util_avg', True)
    process_sa_track_option(args, 'util_avg_rt', False)
    process_sa_track_option(args, 'util_avg_dl', False)
    process_sa_track_option(args, 'util_avg_irq', False)
    process_sa_track_option(args, 'load_avg_thermal', False)
    process_sa_track_option(args, 'load_avg', True)
    process_sa_track_option(args, 'runnable_avg', True)
    process_sa_track_option(args, 'uclamped_avg', True)
    process_sa_track_option(args, 'cpu_nr_running', False)

    if args.sched_report or args.sched_states or args.sched_states_parent:
        sched.init(trace)
        show_tui = True

        if args.save_csv:
            sched.states_save_csv(prefix)
            show_tui = False

        if args.save_png:
            print("sched-* --save-png: Not implemented yet.")
            show_tui = False

        if show_tui:
            if args.sched_report:
                sched.sched_report(pltext)
            if args.sched_states:
                sched.states_summary(pltext, args.sched_states)
            if args.sched_states_parent:
                sched.states_summary_parent(pltext, args.sched_states_parent)

    trace.close()

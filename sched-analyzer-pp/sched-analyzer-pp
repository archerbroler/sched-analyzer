#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
#
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2024 Qais Yousef

import argparse
import freq
import idle
import matplotlib
import matplotlib.pyplot as pltlib
import os
import pelt
import plotext as pltext
import sched
import trace_processor as tp

try:
    import argcomplete
except:
    pass

args = None


def parse_cmdline():
    parser = argparse.ArgumentParser(description='''
    Post Process sched-analyzer.perfetto-trace captured with sched-analyzer tool
    ''', formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('filename',
                    help='perfetto-trace file to post process.')

    parser.add_argument('--save-png', action='store_true',
                    help='Save graphs as png images.')
    parser.add_argument('--save-csv', action='store_true',
                    help='Save raw data as csv file.')

    parser.add_argument('--freq', action='store_true',
                    help='Show frequency for all cpus.')
    parser.add_argument('--freq-residency', action='store_true',
                    help='Show percentage of time spent in each frequency for all cpus.')
    parser.add_argument('--idle-residency', action='store_true',
                    help='Show percentage of time spent in each idle state for all cpus.')

    parser.add_argument('--util-avg', action='append', metavar='PATTERN',
                    help='Show util_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str')
    parser.add_argument('--util-avg-hist', action='append', metavar='PATTERN',
                    help='Same as util-avg but shows a histogram instead.')
    parser.add_argument('--util-avg-rt', action='append', metavar='PATTERN',
                    help='Show util_avg_rt for CPUs. Can be provided multiple times. \'CPU\' to show all cpus')
    parser.add_argument('--util-avg-rt-hist', action='append', metavar='PATTERN',
                    help='Same as util-avg-rt but shows a histogram instead.')
    parser.add_argument('--util-avg-dl', action='append', metavar='PATTERN',
                    help='Show util_avg_dl for CPUs. Can be provided multiple times. \'CPU\' to show all cpus')
    parser.add_argument('--util-avg-dl-hist', action='append', metavar='PATTERN',
                    help='Same as util-avg-dl but shows a histogram instead.')
    parser.add_argument('--util-avg-irq', action='append', metavar='PATTERN',
                    help='Show util_avg_irq for CPUs. Can be provided multiple times. \'CPU\' to show all cpus')
    parser.add_argument('--util-avg-irq-hist', action='append', metavar='PATTERN',
                    help='Same as util-avg-irq but shows a histogram instead.')
    parser.add_argument('--util-avg-thermal', action='append', metavar='PATTERN',
                    help='Show util_avg_thermal for CPUs. Can be provided multiple times. \'CPU\' to show all cpus')
    parser.add_argument('--util-avg-thermal-hist', action='append', metavar='PATTERN',
                    help='Same as util-avg-thermal but shows a histogram instead.')
    parser.add_argument('--load-avg', action='append', metavar='PATTERN',
                    help='Show load_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str')
    parser.add_argument('--load-avg-hist', action='append', metavar='PATTERN',
                    help='Same as load-avg but shows a histogram instead.')
    parser.add_argument('--runnable-avg', action='append', metavar='PATTERN',
                    help='Show runnable_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str')
    parser.add_argument('--runnable-avg-hist', action='append', metavar='PATTERN',
                    help='Same as runnable-avg but shows a histogram instead.')
    parser.add_argument('--uclamped-avg', action='append', metavar='PATTERN',
                    help='Show uclamped_avg for CPUs/tasks. Can be provided multiple times. \'CPU\' to show all cpus or specific task name to show all task that match the str')
    parser.add_argument('--uclamped-avg-hist', action='append', metavar='PATTERN',
                    help='Same as uclamped-avg but shows a histogram instead.')

    parser.add_argument('--sched-states', action='append', metavar='PATTERN',
                    help='Print a summary of sched-states for a task in the trace. Can be provided multiple times.')


    parser.add_argument('--theme', type=str, default='clear',
                    choices=['default', 'clear', 'pro', 'matrix',
                             'windows', 'girly', 'dark', 'metro',
                             'elegant', 'grandpa', 'salad', 'serious',
                             'scream', 'dreamland', 'sand', 'mature'],
                    help='TUI Color theme.')

    try:
        argcomplete.autocomplete(parser)
    except:
        pass

    return parser.parse_args()

if __name__ == '__main__':
    args = parse_cmdline()

    pltext.clf()
    pltext.cld()
    pltext.theme(args.theme)
    matplotlib.use('Agg')

    prefix = args.filename.replace('.perfetto-trace', '')

    trace = tp.get_trace(args.filename)

    if args.freq or args.freq_residency:
        freq.init(trace)
        show_tui = True

        if args.save_csv:
            freq.save_csv(prefix)
            show_tui = False

        if args.freq:
            if (args.save_png):
                freq.plot_matplotlib(pltlib, prefix)
                show_tui = False

            if show_tui:
                freq.plot_tui(pltext)

        if args.freq_residency:
            if (args.save_png):
                freq.plot_residency_matplotlib(pltlib, prefix)
                show_tui = False

            if show_tui:
                freq.plot_residency_tui(pltext)

    if args.idle_residency:
        idle.init(trace)
        show_tui = True

        if args.save_csv:
            idle.save_csv(prefix)
            show_tui = False

        if (args.save_png):
            idle.plot_residency_matplotlib(pltlib, prefix)
            show_tui = False

        if show_tui:
            idle.plot_residency_tui(pltext)

    if args.util_avg or args.util_avg_hist:
        pelt.init(trace, 'util_avg')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.util_avg:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.util_avg)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.util_avg)

        if args.util_avg_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.util_avg_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.util_avg_hist)

    if args.util_avg_rt or args.util_avg_rt_hist:
        pelt.init(trace, 'util_avg_rt')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.util_avg_rt:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.util_avg_rt)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.util_avg_rt)

        if args.util_avg_rt_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.util_avg_rt_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.util_avg_rt_hist)

    if args.util_avg_dl or args.util_avg_dl_hist:
        pelt.init(trace, 'util_avg_dl')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.util_avg_dl:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.util_avg_dl)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.util_avg_dl)

        if args.util_avg_dl_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.util_avg_dl_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.util_avg_dl_hist)

    if args.util_avg_irq or args.util_avg_irq_hist:
        pelt.init(trace, 'util_avg_irq')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.util_avg_irq:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.util_avg_irq)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.util_avg_irq)

        if args.util_avg_irq_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.util_avg_irq_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.util_avg_irq_hist)

    if args.util_avg_thermal or args.util_avg_thermal_hist:
        pelt.init(trace, 'util_avg_thermal')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.util_avg_thermal:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.util_avg_thermal)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.util_avg_thermal)

        if args.util_avg_thermal_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.util_avg_thermal_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.util_avg_thermal_hist)

    if args.load_avg or args.load_avg_hist:
        pelt.init(trace, 'load_avg')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.load_avg:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.load_avg)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.load_avg)

        if args.load_avg_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.load_avg_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.load_avg_hist)

    if args.runnable_avg or args.runnable_avg_hist:
        pelt.init(trace, 'runnable_avg')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.runnable_avg:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.runnable_avg)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.runnable_avg)

        if args.runnable_avg_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.runnable_avg_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.runnable_avg_hist)

    if args.uclamped_avg or args.uclamped_avg_hist:
        pelt.init(trace, 'uclamped_avg')
        show_tui = True

        if args.save_csv:
            pelt.pelt_save_csv(prefix)
            show_tui = False

        if args.uclamped_avg:
            if args.save_png:
                pelt.plot_pelt_matplotlib(pltlib, prefix, args.uclamped_avg)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_tui(pltext, args.uclamped_avg)

        if args.uclamped_avg_hist:
            if args.save_png:
                pelt.plot_pelt_hist_matplotlib(pltlib, prefix, args.uclamped_avg_hist)
                show_tui = False

            if show_tui:
                pelt.plot_pelt_hist_tui(pltext, args.uclamped_avg_hist)

    if args.sched_states:
        sched.init(trace)

        sched.states_summary(pltext, args.sched_states)

    trace.close()
